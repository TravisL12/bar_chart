{"version":3,"sources":["Graph.js","data.js","App.js","index.js"],"names":["margin","width","height","StackedBarChart","data","ref","useRef","draw","useCallback","current","d3","selectAll","remove","svg","subgroups","Object","keys","slice","groups","map","d","time","x","domain","range","padding","append","attr","call","y","color","stackedData","join","key","bandwidth","useEffect","randomizer","max","min","Math","round","random","getData","count","i","push","cat","dog","fish","App","useState","setData","className","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qNAMMA,EAAgB,GAAhBA,EAA2B,GAA3BA,EAAuC,GAAvCA,EAAiD,GACjDC,EAJY,IAIQD,EAAcA,EAClCE,EAJa,IAISF,EAAaA,EAyE1BG,MAvEf,YAAoC,IAATC,EAAQ,EAARA,KACnBC,EAAMC,mBAENC,EAAOC,uBAAY,WACnBH,EAAII,SACNC,IAAUL,EAAII,SAASE,UAAU,KAAKC,SAGxC,IAAMC,EAAMH,IAAUL,EAAII,SAGtBK,EAAYC,OAAOC,KAAKZ,EAAK,IAAIa,MAAM,GAGrCC,EAASd,EAAKe,KAAI,SAACC,GAAD,OAAOA,EAAEC,QAG3BC,EAAIZ,MAAea,OAAOL,GAAQM,MAAM,CAAC,EAAGvB,IAAQwB,QAAQ,CAAC,KACnEZ,EACGa,OAAO,KACPC,KAAK,YAFR,oBAEkC3B,EAFlC,aAEkDE,EAFlD,MAGG0B,KAAKlB,IAAcY,IAGtB,IAAMO,EAAInB,MAAiBa,OAAO,CAAC,EAAG,KAAKC,MAAM,CAACtB,EAAQ,IAC1DW,EACGa,OAAO,KACPC,KAAK,YAFR,oBAEkC3B,EAFlC,MAGG4B,KAAKlB,IAAYmB,IAGpB,IAAMC,EAAQpB,MAEXa,OAAOT,GACPU,MAAM,CAAC,OAAQ,UAAW,WAGvBO,EAAcrB,MAAWM,KAAKF,EAAhBJ,CAA2BN,GAG/CS,EACGa,OAAO,KACPf,UAAU,KAEVP,KAAK2B,GACLC,KAAK,KACLL,KAAK,QAAQ,SAACP,GAAD,OAAOU,EAAMV,EAAEa,QAC5BtB,UAAU,QAEVP,MAAK,SAACgB,GAAD,OAAOA,KACZY,KAAK,QACLL,KAAK,KAAK,SAACP,GAAD,OAAOE,EAAEF,EAAEhB,KAAKiB,SAC1BM,KAAK,YAZR,oBAYkC3B,EAZlC,MAaG2B,KAAK,KAAK,SAACP,GAAD,OAAOS,EAAET,EAAE,OACrBO,KAAK,UAAU,SAACP,GAAD,OAAOS,EAAET,EAAE,IAAMS,EAAET,EAAE,OACpCO,KAAK,QAASL,EAAEY,eAClB,CAAC9B,IAYJ,OAVA+B,qBAAU,WACRzB,IAAUL,EAAII,SACXiB,OAAO,OACPC,KAAK,QAAS1B,EAAQD,EAAcA,GACpC2B,KAAK,SAAUzB,EAASF,EAAaA,GACrC0B,OAAO,KACPC,KAAK,YALR,oBAKkC3B,EALlC,aAKkDA,EALlD,MAMAO,MACC,CAACH,EAAMG,IAEH,qBAAKN,MA3EI,IA2EcC,OA1Eb,IA0EiCG,IAAKA,KC9EzD,SAAS+B,IAA8B,IAAnBC,EAAkB,uDAAZ,EAAGC,EAAS,uDAAH,EACjC,OAAOC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMC,GAAOA,GAG3C,IAAMI,EAAU,WAErB,IAFsC,IAAhBC,EAAe,uDAAP,GACxBvC,EAAO,GACJwC,EAAI,EAAGA,EAAID,EAAOC,IACzBxC,EAAKyC,KAAK,CACRxB,KAAK,qBAAD,OAAuBuB,GAC3BE,IAAKV,EAAW,IAChBW,IAAKX,EAAW,IAChBY,KAAMZ,EAAW,MAGrB,OAAOhC,GCMM6C,EAdH,WAAO,IAAD,EACQC,mBAASR,KADjB,mBACTtC,EADS,KACH+C,EADG,KAGhB,OACE,sBAAKC,UAAU,MAAf,UACE,8BACE,wBAAQC,QAAS,kBAAMF,EAAQT,MAA/B,2BAGF,cAAC,EAAD,CAAiBtC,KAAMA,QCV7BkD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.904d8a09.chunk.js","sourcesContent":["import * as d3 from 'd3';\nimport React, { useRef, useEffect, useCallback } from 'react';\n\nconst mainWidth = 800;\nconst mainHeight = 400;\n\nconst margin = { top: 10, right: 30, bottom: 20, left: 50 };\nconst width = mainWidth - margin.left - margin.right;\nconst height = mainHeight - margin.top - margin.bottom;\n\nfunction StackedBarChart({ data }) {\n  const ref = useRef();\n\n  const draw = useCallback(() => {\n    if (ref.current) {\n      d3.select(ref.current).selectAll('*').remove();\n    }\n\n    const svg = d3.select(ref.current);\n\n    // List of subgroups = header of the csv files = soil condition here\n    var subgroups = Object.keys(data[0]).slice(1);\n\n    // List of groups = species here = value of the first column called group -> I show them on the X axis\n    const groups = data.map((d) => d.time);\n\n    // Add X axis\n    const x = d3.scaleBand().domain(groups).range([0, width]).padding([0.2]);\n    svg\n      .append('g')\n      .attr('transform', `translate(${margin.left}, ${height})`)\n      .call(d3.axisBottom(x));\n\n    // Add Y axis\n    const y = d3.scaleLinear().domain([0, 60]).range([height, 0]);\n    svg\n      .append('g')\n      .attr('transform', `translate(${margin.left})`)\n      .call(d3.axisLeft(y));\n\n    // color palette = one color per subgroup\n    const color = d3\n      .scaleOrdinal()\n      .domain(subgroups)\n      .range(['pink', 'magenta', 'purple']);\n\n    //stack the data? --> stack per subgroup\n    const stackedData = d3.stack().keys(subgroups)(data);\n\n    // Show the bars\n    svg\n      .append('g')\n      .selectAll('g')\n      // Enter in the stack data = loop key per key = group per group\n      .data(stackedData)\n      .join('g')\n      .attr('fill', (d) => color(d.key))\n      .selectAll('rect')\n      // enter a second time = loop subgroup per subgroup to add all rectangles\n      .data((d) => d)\n      .join('rect')\n      .attr('x', (d) => x(d.data.time))\n      .attr('transform', `translate(${margin.left})`)\n      .attr('y', (d) => y(d[1]))\n      .attr('height', (d) => y(d[0]) - y(d[1]))\n      .attr('width', x.bandwidth());\n  }, [data]);\n\n  useEffect(() => {\n    d3.select(ref.current)\n      .append('svg')\n      .attr('width', width + margin.left + margin.right)\n      .attr('height', height + margin.top + margin.bottom)\n      .append('g')\n      .attr('transform', `translate(${margin.left}, ${margin.top})`);\n    draw();\n  }, [data, draw]);\n\n  return <svg width={mainWidth} height={mainHeight} ref={ref}></svg>;\n}\n\nexport default StackedBarChart;\n","function randomizer(max = 1, min = 0) {\n  return Math.round(Math.random() * (max - min) + min);\n}\n\nexport const getData = (count = 20) => {\n  const data = [];\n  for (let i = 0; i < count; i++) {\n    data.push({\n      time: `2021-05-05 10:00:0${i}`,\n      cat: randomizer(10),\n      dog: randomizer(10),\n      fish: randomizer(10),\n    });\n  }\n  return data;\n};\n","import StackedBarChart from './Graph';\nimport { getData } from './data';\nimport { useState } from 'react';\n\n// https://www.d3-graph-gallery.com/graph/barplot_stacked_basicWide.html\n\nconst App = () => {\n  const [data, setData] = useState(getData());\n\n  return (\n    <div className=\"App\">\n      <div>\n        <button onClick={() => setData(getData())}>Update Data</button>\n      </div>\n\n      <StackedBarChart data={data} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
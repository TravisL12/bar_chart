{"version":3,"sources":["StackedBarChart.js","SingleBarChart.js","data.js","Graph.js","App.js","index.js"],"names":["margin","width","height","StackedBarChart","data","ref","useRef","groups","map","d","time","subgroups","Object","keys","slice","stackedData","d3","color","domain","range","xScale","padding","yScale","rangeRound","updateBars","selection","selectAll","join","enter","append","attr","bandwidth","style","call","transition","duration","update","draw","useCallback","svg","current","select","text","values","g","key","useEffect","initialize","SingleBarChart","textTransform","rectWidth","_","i","randomizer","max","min","Math","round","random","getData","maxSize","count","push","cat","dog","fish","cow","mouse","getSingleData","Graph","componentProp","useState","setData","GraphComponent","onClick","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7be8322.chunk.js","sourcesContent":["import * as d3 from \"d3\";\nimport React, { useRef, useEffect, useCallback } from \"react\";\n\nconst mainWidth = 1000;\nconst mainHeight = 400;\n\nconst margin = { top: 20, right: 30, bottom: 50, left: 50 };\nconst width = mainWidth - margin.left - margin.right;\nconst height = mainHeight - margin.top - margin.bottom;\n\nfunction StackedBarChart({ data }) {\n  const ref = useRef();\n\n  const groups = data.map((d) => d.time);\n  const subgroups = Object.keys(data[0]).slice(1);\n  const stackedData = d3.stack().keys(subgroups)(data);\n  const color = d3\n    .scaleOrdinal()\n    .domain(subgroups)\n    .range([\"pink\", \"magenta\", \"purple\", \"green\", \"lightblue\"]);\n\n  const xScale = d3.scaleBand().range([0, width]).padding([0.2]);\n  const yScale = d3.scaleLinear().rangeRound([height, 0]);\n\n  const initialize = () => {\n    const svg = d3.select(ref.current);\n\n    // create main viewport\n    svg\n      .attr(\"width\", mainWidth)\n      .attr(\"height\", mainHeight)\n      .append(\"g\")\n      .attr(\"class\", \"stacks\")\n      .attr(\"transform\", `translate(${margin.left})`);\n\n    // create x-axis\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"x-axis\")\n      .attr(\"transform\", `translate(${margin.left}, ${height})`);\n\n    // create y-axis\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"y-axis\")\n      .attr(\"transform\", `translate(${margin.left})`);\n  };\n\n  const updateBars = (selection) => {\n    selection\n      .selectAll(\"rect\")\n      .data((d) => d)\n      .join(\n        (enter) =>\n          enter\n            .append(\"rect\")\n            .attr(\"class\", \"bar\")\n            .attr(\"height\", (d) => yScale(d[0]) - yScale(d[1]))\n            .attr(\"width\", xScale.bandwidth())\n            .attr(\"x\", (d) => xScale(d.data.time))\n            .attr(\"y\", (d) => yScale(d[1]))\n            .style(\"opacity\", 0)\n            .call((enter) =>\n              enter.transition().duration(500).style(\"opacity\", 1)\n            ),\n        (update) => {\n          update\n            .transition()\n            .attr(\"height\", (d) => yScale(d[0]) - yScale(d[1]))\n            .attr(\"width\", xScale.bandwidth())\n            .attr(\"x\", (d) => xScale(d.data.time))\n            .attr(\"y\", (d) => yScale(d[1]));\n        }\n      );\n  };\n\n  const draw = useCallback(() => {\n    const svg = d3.select(ref.current);\n\n    // update x-axis\n    xScale.domain(groups);\n    svg\n      .select(\".x-axis\")\n      .call(d3.axisBottom(xScale))\n      .selectAll(\"text\")\n      .text((d) => d.slice(11))\n      .attr(\"transform\", \"translate(-13,26) rotate(-90)\");\n\n    // update y-axis\n    yScale.domain([0, d3.max(data, (d) => d3.sum(Object.values(d))) * 1.2]);\n    svg.select(\".y-axis\").transition().call(d3.axisLeft(yScale));\n\n    svg\n      .selectAll(\"g.stacks\")\n      .selectAll(\"g.stack\")\n      .data(stackedData)\n      .join(\n        (enter) => {\n          const g = enter.append(\"g\").attr(\"class\", \"stack\");\n\n          g.append(\"g\")\n            .attr(\"class\", \"bars\")\n            .attr(\"fill\", (d) => color(d.key));\n\n          updateBars(g.select(\".bars\"));\n\n          return g;\n        },\n        (update) => {\n          updateBars(update.select(\".bars\"));\n        }\n      );\n  }, [data]);\n\n  useEffect(() => {\n    draw();\n  }, [data, draw]);\n\n  // initialize graph\n  useEffect(() => {\n    initialize();\n    draw();\n  }, []);\n\n  return (\n    <div style={{ padding: \"10px 0\" }}>\n      <svg ref={ref}></svg>\n    </div>\n  );\n}\n\nexport default StackedBarChart;\n","import * as d3 from \"d3\";\nimport React, { useCallback, useRef, useEffect } from \"react\";\n\nconst rectWidth = 30;\nconst mainWidth = 1000;\nconst mainHeight = 300;\n\nconst margin = { top: 20, right: 30, bottom: 50, left: 50 };\nconst width = mainWidth - margin.left - margin.right;\nconst height = mainHeight - margin.top - margin.bottom;\n\nfunction SingleBarChart({ data }) {\n  const ref = useRef();\n\n  const xScale = d3\n    .scaleBand()\n    .domain(Object.keys(data))\n    .range([0, width])\n    .padding(0.3);\n\n  const yScale = d3\n    .scaleLinear()\n    .range([height, 0])\n    .domain([0, d3.max(data) * 1.1]);\n\n  const initialize = () => {\n    const svg = d3.select(ref.current);\n\n    // create viewport\n    svg\n      .attr(\"width\", mainWidth)\n      .attr(\"height\", mainHeight)\n      .append(\"g\")\n      .attr(\"class\", \"bars\")\n      .attr(\"transform\", `translate(${margin.left})`);\n\n    // create x-axis\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"x-axis\")\n      .attr(\"transform\", `translate(${margin.left}, ${height})`)\n      .call(d3.axisBottom(xScale))\n      .selectAll(\"text\")\n      .text((d) => d);\n  };\n\n  const textTransform = (d) => {\n    return d > 10\n      ? `translate(${rectWidth / 2}, 15)`\n      : `translate(${rectWidth / 2}, -2)`;\n  };\n\n  const draw = useCallback(() => {\n    const svg = d3.select(ref.current);\n    // svg.select(\".y-axis\");\n\n    svg\n      .selectAll(\".bars\")\n      .selectAll(\".bar\")\n      .data(data)\n      .join(\n        (enter) => {\n          const g = enter.append(\"g\").attr(\"class\", \"bar\");\n\n          g.append(\"rect\")\n            .attr(\"x\", (_, i) => xScale(i))\n            .attr(\"y\", (d) => yScale(d))\n            .attr(\"height\", (d) => height - yScale(d))\n            .attr(\"width\", rectWidth)\n            .attr(\"stroke-width\", 1)\n            .attr(\"stroke\", \"black\")\n            .attr(\"fill\", \"pink\");\n\n          g.append(\"text\")\n            .text((d) => d)\n            .join(\"text\")\n            .attr(\"x\", (_, i) => xScale(i))\n            .attr(\"y\", (d) => yScale(d))\n            .attr(\"transform\", textTransform)\n            .attr(\"text-anchor\", \"middle\");\n\n          return g;\n        },\n        (update) => {\n          update\n            .select(\"rect\")\n            .transition()\n            .attr(\"y\", (d) => yScale(d))\n            .attr(\"height\", (d) => height - yScale(d));\n          update\n            .select(\"text\")\n            .transition()\n            .text((d) => d)\n            .attr(\"y\", (d) => yScale(d))\n            .attr(\"transform\", textTransform);\n        }\n      );\n  }, [data, height, width]);\n\n  useEffect(() => {\n    initialize();\n    draw();\n  }, []);\n\n  useEffect(() => {\n    draw();\n  }, [data, draw]);\n\n  return <svg ref={ref}></svg>;\n}\n\nexport default SingleBarChart;\n","function randomizer(max = 1, min = 0) {\n  return Math.round(Math.random() * (max - min) + min);\n}\n\nexport const getData = (maxSize = 100) => {\n  const data = [];\n  const count = randomizer(25, 10);\n  for (let i = 0; i < count; i++) {\n    data.push({\n      time: `2021-05-05 10:00:0${i}`,\n      cat: randomizer(maxSize),\n      dog: randomizer(maxSize),\n      fish: randomizer(maxSize),\n      cow: randomizer(maxSize),\n      mouse: randomizer(maxSize),\n    });\n  }\n  return data;\n};\n\nexport const getSingleData = (count = 20) => {\n  const data = [];\n  for (let i = 0; i < count; i++) {\n    data.push(randomizer(100, 1));\n  }\n  return data;\n};\n","import { useState } from 'react';\n\n// https://www.d3-graph-gallery.com/graph/barplot_stacked_basicWide.html\n\nconst Graph = ({ componentProp, getData }) => {\n  const [data, setData] = useState(getData());\n  const GraphComponent = componentProp;\n\n  return (\n    <div>\n      <div>\n        <button onClick={() => setData(getData())}>Update Data</button>\n      </div>\n\n      <GraphComponent data={data} />\n    </div>\n  );\n};\n\nexport default Graph;\n","import StackedBarChart from \"./StackedBarChart\";\nimport SingleBarChart from \"./SingleBarChart\";\nimport { getSingleData, getData } from \"./data\";\nimport Graph from \"./Graph\";\n\n// https://www.d3-graph-gallery.com/graph/barplot_stacked_basicWide.html\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Graph componentProp={StackedBarChart} getData={getData} />\n      <Graph componentProp={SingleBarChart} getData={getSingleData} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}